---

- name: Gather facts from all hosts
  hosts: all
  become: true
  gather_facts: true
  tags: always


# first the necessary vars from every client in the `filedaemons` group are collected,
# which are required to deploy the job(s) for each client on the Bareos Director with the bareos_dir role.
# as the Bareos Director is not supposed to be part of any `filedaemons` group,
# `delegate_to` is used to call the Director with the bareos_dir role, even
# when it's outside of the Ansible -l/--limit scope.
#
# the play uses `run_once` so it's only executed on the first host,
# which then loops over the `filedaemons` group.

- name: Create jobs on Director for every client in host_group filedaemons
  hosts: all
  run_once: true
  become: true
  vars:
    _job_list: []

  pre_tasks:

    # uses `default(omit)` for optional variables
    - name: Create job list for all FDs with defined standard values (group_vars)
      ansible.builtin.set_fact:
        _job_list: >-
          {{ _job_list + [{
            'name': job_defaults.name+'_'+item,
            'client': item,
            'pool': job_defaults.pool,
            'full_backup_pool': job_defaults.full_backup_pool | default(omit),
            'differential_backup_pool': job_defaults.differential_backup_pool | default(omit),
            'incremental_backup_pool': job_defaults.incremental_backup_pool | default(omit),
            'max_full_interval': job_defaults.max_full_interval | default(omit),
            'max_diff_interval': job_defaults.max_diff_interval | default(omit),
            'type': job_defaults.type | default(omit),
            'messages': job_defaults.messages | default(omit),
            'jobdefs': job_defaults.jobdefs | default(omit),
            'storage': job_defaults.storage | default(omit),
            'always_incremental': job_defaults.always_incremental | default(omit),
            'always_incremental_job_retention': job_defaults.always_incremental_job_retention | default(omit),
            'always_incremental_keep_number': job_defaults.always_incremental_keep_number | default(omit),
            'always_incremental_max_full_age': job_defaults.always_incremental_max_full_age | default(omit),
            'client_runbeforejob': job_defaults.client_runbeforejob | default(omit),
            'schedule': job_defaults.schedule | default(omit) }]
          }}
      loop: "{{ groups['filedaemons'] }}"
      tags: manage_jobs
      when:
        - job_defaults is defined
        - job_defaults.pool is defined
        - ansible_limit is undefined or
          item in groups[ansible_limit]  # only use filedaemons in-scope of --limit/-l
        - hostvars[item].bareos_fd_jobs is undefined  # let's you set exceptions on group/host_vars level

    - name: Add dedicated jobs defined in host_vars
      ansible.builtin.set_fact:
        _job_list: >-
          {{ _job_list + hostvars[item].bareos_fd_jobs }}
      loop: "{{ groups['filedaemons'] }}"
      tags: manage_jobs
      when:
        - ansible_limit is undefined or
          item in groups[ansible_limit]  # only use filedaemons in-scope of --limit/-l
        - hostvars[item].bareos_fd_jobs is defined  # let's you set exceptions on group/host_vars level

    # workaround to generate additional VirtualFull jobs per host, when enabled.
    # based on Bareos Always Incremental Backup Scheme:
    # https://docs.bareos.org/TasksAndConcepts/AlwaysIncrementalBackupScheme.html#virtual-full-jobs
    #
    # requires an existing JobDef resource that cover the settings from
    # https://docs.bareos.org/TasksAndConcepts/AlwaysIncrementalBackupScheme.html#id14
    # the name of the Fileset can be set with `virtual_full_jobdef`
    - name: Add additional VirtualFull job when enabled
      ansible.builtin.set_fact:
        _job_list: >-
          {{ _job_list + [{
            'name': 'Job_'+item+'_Virtual_Longterm_Full',
            'client': item,
            'pool': job_defaults.pool,
            'messages': job_defaults.messages | default(omit),
            'jobdefs': virtual_full_jobdef | default('JobDef_VirtualFull'),
            'storage': job_defaults.storage | default(omit),
            'schedule': job_defaults.schedule | default(omit) }]
          }}
      loop: "{{ groups['filedaemons'] }}"
      tags: manage_jobs
      when:
        - item.virtual_full_job


    - name: Register job list
      ansible.builtin.set_fact:
        bareos_dir_jobs: "{{ _job_list }}"
      tags: manage_jobs

  tasks:
    - name: Delegate bareos_dir role to Director
      ansible.builtin.import_role:
        name: bareos_dir
      delegate_to: "{{ groups['directors'][0] }}"  # workaround to call the director
      tags:
        - manage_jobs
